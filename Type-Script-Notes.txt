
Angular

Framewok for building  modern single page application


In Traditional Application each user action results in a full HTML page load


Single page application performs partial update e.g--> google map and gmail






TYPESCRIPT(typescriptlang.org)


Provides static typing support to JavaScript

 Helps with IDE Support : code completion and debugging


Add Support for Object Oriented Programming
 classses,objects,inheritance, etc.




Strongly-typed language with compile time checking and IDE Support

Increased developer productivity and efficiency

The Angular Framework internally developed using TypeScript






web browser do not unerstand TypeScript

Have to convert TypeScript Code to JavaScript Code

It is known as Transpiling

Transpiling accomplished using tsc command



install tsc 
npm install -g typescript


set up tool

https://github.com/darbyluv2code/fullstack-angular-and-springboot



we r using new TypeScript let keyword for variable declaration

The Javascript var keyword had a number of pitfalls(scoping,capturing,shadowing etc)









myhelloworld.ts

console.log("Hello World");




Terminal

to compile ts 

tsc myhelloworld.ts(transpiling ....> ts to js)

to run 

node myhelloworld.js





Variables

sample-types.ts

let found:boolean=true;

let grade:number=80;

let firstName:string="Elone";

let lastName:string="Musk";

console.log(found);
console.log("The grade is "+grade);
//Template String
console.log(`Grade ${grade}`);

console.log("Hi "+firstName+" "+lastName);

Template String
console.log(`Hi ${firstName} ${lastName}`);




Corresponding sample-types.js


var found = true;
var grade = 80;
var firstName = "Elone";
var lastName = "Musk";
console.log(found);
console.log("The grade is " + grade);
console.log("Hi " + firstName + " " + lastName);






Loops and Array

In type Script Arrays are Dynamic

loop.ts

let reviews : number[]=[5,4,5.5,6];

let total:number=0;

for(let i=0;i<reviews.length;i++)
{
    console.log(reviews[i]);
    total=total+reviews[i];
}

let avg:number;

avg=total/reviews.length;

console.log(`Average is ${avg}`);


let Sports : string[]=["Football","Tennis","Golf"]

Sports.push("Baseball");
Sports.push("Hockey");

// Simplified for loop
for(let temp of Sports)
{
    console.log(temp);
}




loop.js
var reviews = [5, 4, 5.5, 6];
var total = 0;
for (var i = 0; i < reviews.length; i++) {
    console.log(reviews[i]);
    total = total + reviews[i];
}
var avg;
avg = total / reviews.length;
console.log("Average is " + avg);
var Sports = ["Football", "Tennis", "Golf"];
Sports.push("Baseball");
Sports.push("Hockey");
for (var _i = 0, Sports_1 = Sports; _i < Sports_1.length; _i++) {
    var temp = Sports_1[_i];
    console.log(temp);
}






tsc --noEmitOnError file.ts(do not generate .js file if there is error)


Class

Customer.ts

class Customer{
firstName:string;
lastName:string;


constructor(theFirst:string,theLast:string){
    this.firstName=theFirst;
    this.lastName=theLast;
}


}

let myCustomer=new Customer("Martin","Luther");
/** 
myCustomer.firstName="Derek";
myCustomer.lastName="Obrien"; 
*/
console.log(`firstName is ${myCustomer.firstName}`);
console.log(myCustomer.lastName); 








Customer.js

var Customer = /** @class */ (function () {
    function Customer(theFirst, theLast) {
        this.firstName = theFirst;
        this.lastName = theLast;
    }
    return Customer;
}());
var myCustomer = new Customer("Martin", "Luther");
/**
myCustomer.firstName="Derek";
myCustomer.lastName="Obrien";
*/
console.log("firstName is " + myCustomer.firstName);
console.log(myCustomer.lastName);








Accessors(getters/setters)

The get/set accessors feauture is only supported in ES5 and higher


You have to set a compiler flag in order to compile the code

tsc --target ES5 --noEmitOnErroor file.ts






Problems with too many compiler flag

so we can set this up in config file which is "tsconfig.json" file.





tsconfig.json

defines compiler options and project settings

place this in the root of project directory


tsc --init

tsc(to compile all the ts file of the directory)










Customer1.ts

class Customer1{
private _firstName:string;
private _lastName:string;

    


constructor(theFirst:string,theLast:string){
    this._firstName=theFirst;
    this._lastName=theLast;
}

public get firstName():string{
    return this._firstName;

}

public set firstName(value:string){
    this._firstName=value;
}



public get lastName():string{
    return this._lastName;

}

public set lastName(value:string){
    this._lastName=value;
}




}

let myCustomer1=new Customer1("Martin","Luther");
/** 
myCustomer.firstName="Derek";
myCustomer.lastName="Obrien"; 
*/
console.log(`firstName is ${myCustomer1.firstName}`);
console.log(myCustomer1.lastName); 









Customer1.js

var Customer1 = /** @class */ (function () {
    function Customer1(theFirst, theLast) {
        this._firstName = theFirst;
        this._lastName = theLast;
    }
    Object.defineProperty(Customer1.prototype, "firstName", {
        get: function () {
            return this._firstName;
        },
        set: function (value) {
            this._firstName = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Customer1.prototype, "lastName", {
        get: function () {
            return this._lastName;
        },
        set: function (value) {
            this._lastName = value;
        },
        enumerable: false,
        configurable: true
    });
    return Customer1;
}());
var myCustomer1 = new Customer1("Martin", "Luther");
/**
myCustomer.firstName="Derek";
myCustomer.lastName="Obrien";
*/
console.log("firstName is " + myCustomer1.firstName);
console.log(myCustomer1.lastName);







Parameter Properties

Removes Boiler plate code

instead of


class Customer1{
private _firstName:string;
private _lastName:string;

    


constructor(theFirst:string,theLast:string){
    this._firstName=theFirst;
    this._lastName=theLast;
}



we can do

constructor(private _firstName:string,private _lastName:string){
        

    }












Modules


Customer1.ts

export class Customer1{


    constructor(private _firstName:string,private _lastName:string){
        
    }




public get firstName():string{
    return this._firstName;

}

public set firstName(value:string){
    this._firstName=value;
}



public get lastName():string{
    return this._lastName;

}

public set lastName(value:string){
    this._lastName=value;
}


}





Driver.ts

import {Customer1} from "./Customer1";
let myCustomer1=new Customer1("Martin","Luther");
/** 
myCustomer.firstName="Derek";
myCustomer.lastName="Obrien"; 
*/
console.log(`firstName is ${myCustomer1.firstName}`);
console.log(myCustomer1.lastName); 








Inheritance



TypeScript only supports single inheritance
we can implement multiple interfaces



example 1

Shape.ts

export class Shape
{

    constructor(private _x: number,private _y: number){

    }

    public get x(): number {
        return this._x;
    }
    public set x(value: number) {
        this._x = value;
    }
    
    public get y(): number {
        return this._y;
    }
    public set y(value: number) {
        this._y = value;
    }

getInfo():string{
    return `x=${this._x},y=${this._y}`;
}


}








Circle.ts




import { Shape } from "./Shape";

export class Circle extends Shape{

//private _radius:number;    

constructor(theX:number,theY:number,private _radius:number){

    super(theX,theY);

}


    public get radius(): number {
        return this._radius;
    }
    public set radius(value: number) {
        this._radius = value;
    }

    getInfo():string{
        return super.getInfo() + `, radius=${this._radius}`;
    }


}








Driver.ts


import {Shape} from './Shape';
import {Circle} from './Circle';

let myShape=new Shape(10,20);
console.log(myShape.getInfo());

let myCircle=new Circle(5,8,12);

console.log(myCircle.getInfo());






example-2

Rectangle.ts

import { Shape } from "./Shape";

export class Rectangle extends Shape{
    

    constructor(theX:number,theY:number,private _width:number,private _length:number){

        super(theX,theY);

    }
    public get width(): number {
        return this._width;
    }
    public set width(value: number) {
        this._width = value;
    }

    
    public get length(): number {
        return this._length;
    }
    public set length(value: number) {
        this._length = value;
    }
    getInfo():string{

        return super.getInfo() + `, width=${this._width}, length=${this._length}`;
        
    }

}




ArrayDriver.ts

import {Shape} from './Shape';
import {Circle} from './Circle';
import { Rectangle } from './Rectangle';

let myShape=new Shape(10,20);

let myCircle=new Circle(5,8,12);

let myRectangle = new Rectangle(1,2,8,9);


let theShapes:Shape[]=[];
theShapes.push(myShape);
theShapes.push(myCircle);
theShapes.push(myRectangle);

for(let tempShapes of theShapes)
{
    console.log(tempShapes.getInfo());
}




Abstract classes

Shape.ts

export abstract class Shape
{

    constructor(private _x: number,private _y: number){

    }

    public get x(): number {
        return this._x;
    }
    public set x(value: number) {
        this._x = value;
    }
    
    public get y(): number {
        return this._y;
    }
    public set y(value: number) {
        this._y = value;
    }

getInfo():string{
    return `x=${this._x},y=${this._y}`;
}

abstract calculate():number;


}









Rectangle.ts

import { Shape } from "./Shape";

export class Rectangle extends Shape{
    calculate(): number {
       return this._length*this._width;
    }
    

    constructor(theX:number,theY:number,private _width:number,private _length:number){

        super(theX,theY);

    }
    public get width(): number {
        return this._width;
    }
    public set width(value: number) {
        this._width = value;
    }

    
    public get length(): number {
        return this._length;
    }
    public set length(value: number) {
        this._length = value;
    }
    getInfo():string{

        return super.getInfo() + `, width=${this._width}, length=${this._length}`;
        
    }

}




Circle.ts


import { Shape } from "./Shape";

export class Circle extends Shape{
    calculate(): number {
        return Math.PI*Math.pow(this._radius,2)
    }

//private _radius:number;    

constructor(theX:number,theY:number,private _radius:number){

    super(theX,theY);

}


    public get radius(): number {
        return this._radius;
    }
    public set radius(value: number) {
        this._radius = value;
    }

    getInfo():string{
        return super.getInfo() + `, radius=${this._radius}`;
    }


}






import {Shape} from './Shape';
import {Circle} from './Circle';
import { Rectangle } from './Rectangle';



let myCircle=new Circle(5,8,12);

let myRectangle = new Rectangle(1,2,8,9);


let theShapes:Shape[]=[];

theShapes.push(myCircle);
theShapes.push(myRectangle);

for(let tempShapes of theShapes)
{
    console.log(tempShapes.getInfo());
    console.log(tempShapes.calculate());
    console.log();
}

















Interfaces


Coach.ts

export interface Coach{
    getDailyWorkout():string;
}




CricketCoach.ts

import { Coach } from "./Coach";

export class CricketCoach implements Coach{
    getDailyWorkout(): string {
        return "Practice to hit six";
    }
    
}






GolfCoach.ts

import { Coach } from "./Coach";

export class GolfCoach implements Coach{
    getDailyWorkout(): string {
        return"Golf workout";
    }
    
}




Driver.ts

import { CricketCoach } from "./CricketCoach";
import { GolfCoach } from "./GolfCoach";
import { Coach } from "./Coach";

let myCricketCoach=new CricketCoach();
let myGolfCoach=new GolfCoach();

let theCoaches:Coach[]=[];

// add Coaches to array

theCoaches.push(myCricketCoach);
theCoaches.push(myGolfCoach);

for(let tempCoach of theCoaches)
{
    console.log(tempCoach.getDailyWorkout());
}















































